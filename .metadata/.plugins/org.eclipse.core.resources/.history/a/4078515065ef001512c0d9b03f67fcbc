package com.mygdx.game;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.Input.Keys;

public class EventListener implements InputProcessor {
	private MyGdxGame game;
	private Menu menu;
	private Music bewegungmusic;

	@Override
	public boolean keyDown(int keycode) {
//		if (game.isFrozen()){
//			try {
//				Thread.sleep(400);
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}

		// keine Steuerung wenn das Spiel pausiert ist
		if (!game.isPaused() && !game.isGameOver()) {
			try {
				Thread.sleep(4000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (game.getState() == GameState.UPPERWORLD) {

				switch (keycode) {
				case Keys.LEFT:
					game.changeSwimmerPosition_swim(-1);
					bewegungmusic = Gdx.audio.newMusic(Gdx.files
							.internal("button-21.mp3"));
					bewegungmusic.setVolume(0.05f);
					bewegungmusic.play();
					break;
				case Keys.RIGHT:
					game.changeSwimmerPosition_swim(1);
					bewegungmusic = Gdx.audio.newMusic(Gdx.files
							.internal("button-21.mp3"));
					bewegungmusic.setVolume(0.05f);
					bewegungmusic.play();
					break;
				case Keys.UP:
					break;
				case Keys.DOWN:
					break;
				case Keys.ALT_LEFT:
//					game.changeDiveState();

				}
			}

			else if (game.getState() == GameState.LOWERWORLD) {

				switch (keycode) {
				case Keys.UP:
					game.changeSwimmerPosition_dive(20000);
					break;
				case Keys.DOWN:
					game.changeSwimmerPosition_dive(-20000);
					break;
				}
			}

		}
/*
		if (game.getState() != GameState.MAINMENU) {
			if (keycode == Keys.ESCAPE) {
				game.pauseGame(true);

			}
		}
*/		
		menu.handleKey(keycode);

		return false;

	}

	@Override
	public boolean keyUp(int keycode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean keyTyped(char character) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean scrolled(int amount) {
		// TODO Auto-generated method stub
		return false;
	}

	public void setGame(MyGdxGame g) {
		game = g;
	}
	
	public void setMenu(Menu m){
		menu = m;
	}

}
