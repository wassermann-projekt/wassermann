package com.mygdx.game;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.backends.lwjgl.audio.Mp3.Sound;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.*;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.FreeTypeFontParameter;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.*;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Arrays;
import java.util.Timer;

import javax.swing.JFrame;
import javax.swing.JTextField;

public class MyGdxGame extends ApplicationAdapter {

	
	//Textures
	Texture anzeige;
	Texture felsen_unter_wasser;
	Texture hai_1;
	Texture hai_2;
	Texture herz_leer_tex;
	Texture herz_voll_tex;
	Texture hindernis_felsen;
	Texture rennschwan;
	Texture schwimmer_aufsicht_body;
	Texture schwimmer_aufsicht_linker_arm;
	Texture schwimmer_aufsicht_rechter_arm;
	Texture schwimmer_seitlich_body;
	Texture schwimmer_seitlich_rechtes_bein;
	Texture schwimmer_seitlich_linkes_bein;
	Texture luftblasen;
	Texture seerosen;
	Texture seerosen_mund;
	Texture seerose_zaehne;
	Texture ufer;
	Texture unter_wasser_textur_1;
	Texture unter_wasser_textur_2;
	Texture unter_wasser_textur_3;
	Texture unter_wasser_textur_4;
	Texture wellen;

	
	private GameState state;

	// Hintergrund Schwimmwelt
	private Sprite wellen1;
	private Sprite wellen2;
	private Sprite ufer_links;
	private Sprite ufer_rechts;

	// Hintergrund Tauchwelt
	private Sprite hintergrund1;
	private Sprite hintergrund2;
	private Sprite hintergrund3;
	private Sprite hintergrund4;

	private Sprite herz_leer;
	private Sprite herz_voll;
	private Sprite swimmer;
	private Sprite swimmer_rechter_arm;
	private Sprite swimmer_linker_arm;

	private Sprite tauchersprite;
	private Sprite taucher_rechtes_bein;
	private Sprite taucher_linkes_bein;
	private Sprite taucher_luftblasen;
	
	private SpriteBatch batch;

	private World world;
	public Body body;

	// Schrift
	private BitmapFont font;
	private BitmapFont gameover;

	// Graphics Updates -> Variables to update positions
	private float wellen_x_pos;
	private float unter_wasser_textur_pos;
	private float zeit_unter_wasser;
	private float hindernis_x_pos;

	// Hindernis-Array-Swim
	private Obstacle[] hindernis = new Obstacle[40];
	// Positionen aktiver Hindernisse in array
	private boolean[] hindernis_aktiv = new boolean[40];

	// Hindernis Array Dive
	private Obstacle hindernis_lowerworld;
	private float[] wand_punkte = new float[2 * 10];

	// Hilfsvariable für den Hindernisgenerator
	// Bei Aufruf von Hindernis-Generator wird h auf 0 gesetzt
	// Bei jedem Aufruf von render wird geschwindigkeit auf h addiert
	// Bis h größer gleich der Länge eines Hindernisses ist, dann starte
	// Hindernisgenerator
	private float h;

	// Variablen für Schwimmer, Hintergrund, Hindernis
	private float geschwindigkeit;
	private float hindernis_geschwindigkeit = 1.0f;
	// Aenderung der Geschwindigkeit
	private float beschleunigung;

	// swimmer variables
	// Bahn des Schwimmers
	private int swimmer_position_swim;
	// swimmer Groesse
	private float swimmer_width;

	//Abstand zur Bahn
	private float swimmer_offset;
	//Position der Arme
	private float arm_pos;
	private float arm_pos_x = 0.0f;
	private float arm_pos_y = 0.0f;
	
	//taucher variables
	//taucher Groesse
	private float taucher_width;
	private float luftblasen_x_pos;
	private float luftblasen_y_pos;

	// game variables
	private long score;
	private long level;
	private int health;
	private boolean game_over;

	// Zählt wie viel weiter geschwommen wurde, in Länge eines Hindernisses
	private long Zeile;

	//Hilfsvar: bei Kollision
	private boolean freeze;
	
	// Musik & Sound
	private Sound sound;
	private Music music;
	private Music bewegungmusic;

	// shortcuts for graphics fields
	private int width, height;
	private float ppiX, ppiY;

	// input
	private boolean paused;
	private InputMultiplexer multiplexer;

	private Menu menu;
	private EventListener steuerung;

	private FreeTypeFontGenerator generator;


	@Override
	public void create() {

		// init Sounds
		music = Gdx.audio.newMusic(Gdx.files.internal("super-mario-bros.mp3"));
		music.setLooping(true);
		music.setVolume(0.3f);

		bewegungmusic = Gdx.audio.newMusic(Gdx.files.internal("wave.mp3"));
		bewegungmusic.setVolume(0.1f);

		// init state
		state = GameState.MAINMENU;

		// Infos Screen;
		readGraphics();

		// New Sprite Batch
		batch = new SpriteBatch();
		
		//Textures laden
		anzeige = new Texture("anzeige.png");
		felsen_unter_wasser = new Texture("felsen_unter_wasser.png");
		hai_1 = new Texture("hai_1.png");
		hai_2 = new Texture("hai_2.png");
		herz_leer_tex = new Texture("herz_leer.png");
		herz_voll_tex = new Texture("herz_voll.png");
		hindernis_felsen = new Texture("hindernis_felsen.png");
		rennschwan = new Texture("rennschwan.png");
		schwimmer_aufsicht_body = new Texture("schwimmer_aufsicht_body.png");
		schwimmer_aufsicht_linker_arm = new Texture("schwimmer_aufsicht_linker_arm.png");
		schwimmer_aufsicht_rechter_arm = new Texture("schwimmer_aufsicht_rechter_arm.png");
		schwimmer_seitlich_body = new Texture("schwimmer_seitlich_body.png");
		schwimmer_seitlich_rechtes_bein = new Texture("schwimmer_seitlich_rechtes_bein.png");
		schwimmer_seitlich_linkes_bein = new Texture("schwimmer_seitlich_linkes_bein.png");
		luftblasen = new Texture("luftblasen.png");
		seerosen = new Texture("seerosen.png");
		seerosen_mund = new Texture("seerosen_mund.png");
		seerose_zaehne = new Texture("seerosen_zaehne.png");
		ufer = new Texture("ufer.png");
		unter_wasser_textur_1 = new Texture("unter_wasser_textur_1.png");
		unter_wasser_textur_2 = new Texture("unter_wasser_textur_2.png");
		unter_wasser_textur_3 = new Texture("unter_wasser_textur_3.png");
		unter_wasser_textur_4 = new Texture("unter_wasser_textur_4.png");
		wellen = new Texture("wellen.png");

		// init Wellentextur
		wellen1 = new Sprite(new Texture("wellen.png"));
		wellen1.setSize(width, height);
		wellen2 = new Sprite(new Texture("wellen.png"));
		wellen2.setSize(width, height);
		wellen_x_pos = 0;

		// init Unterwasserwelt Hintergrund
		hintergrund1 = new Sprite(new Texture("unter_wasser_textur_1.png"));
		hintergrund1.setSize(width, height);
		hintergrund2 = new Sprite(new Texture("unter_wasser_textur_2.png"));
		hintergrund2.setSize(width, height);
		hintergrund3 = new Sprite(new Texture("unter_wasser_textur_3.png"));
		hintergrund3.setSize(width, height);
		hintergrund4 = new Sprite(new Texture("unter_wasser_textur_4.png"));
		hintergrund4.setSize(width, height);
		unter_wasser_textur_pos = 0.0f;
		zeit_unter_wasser = 0.0f;

		//init Taucher
		tauchersprite = new Sprite(schwimmer_seitlich_body);
		taucher_rechtes_bein = new Sprite(schwimmer_seitlich_rechtes_bein);
		taucher_linkes_bein = new Sprite(schwimmer_seitlich_linkes_bein);
		taucher_width = width/7;
		luftblasen_x_pos = 0.0f-(taucher_width);
		luftblasen_y_pos = 0.0f;
		
		world = new World(new Vector2(0, -1), true);
		BodyDef diver = new BodyDef();
		diver.type = BodyDef.BodyType.DynamicBody;

		diver.position.set(0, 0);
		body = world.createBody(diver);

		CircleShape circle = new CircleShape();
		circle.setRadius(6f);

		FixtureDef diverfixture = new FixtureDef();
		diverfixture.shape = circle;
		diverfixture.density = 0.1f;
		diverfixture.friction = 0.4f;
		diverfixture.restitution = 0.6f;

		body.createFixture(diverfixture);

		circle.dispose();

		//Anzeigen
		//init Lebens-Anzeige
		herz_leer = new Sprite(herz_leer_tex);
		herz_voll = new Sprite(herz_voll_tex);		
		herz_voll.setSize(width/18, height/18);
		herz_leer.setSize(width/18, height/18);
		
		health = 5;
		
		//init Schrift für alle Anzeigen
		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("Mecha_Bold.ttf"));
		FreeTypeFontParameter parameter1 = new FreeTypeFontParameter();
		FreeTypeFontParameter parameter2 = new FreeTypeFontParameter();
		parameter1.size = 27;
		parameter2.size = 50;
		parameter1.characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.!'()>?: ";
		font = generator.generateFont(parameter1);
		gameover = generator.generateFont(parameter2);

		//init Swimmer_Grafik
		swimmer = new Sprite(schwimmer_aufsicht_body);
		swimmer_linker_arm = new Sprite(schwimmer_aufsicht_linker_arm);
		swimmer_rechter_arm = new Sprite(schwimmer_aufsicht_rechter_arm);
		
		swimmer_offset = ((width-2) / 9) * 1/8;
		swimmer_width = ((width-2) / 9) * 3/4;

		//init Ufertextur
		ufer_links = new Sprite(ufer);
		ufer_links.setSize(width/9, height);
		ufer_rechts = new Sprite(ufer);
		ufer_rechts.setSize(width/9, height);
		ufer_rechts.flip(true, false);
		ufer_rechts.setOrigin(width - ufer_rechts.getWidth(), 0);

		// input
		multiplexer = new InputMultiplexer();
		// erstelle menu
		menu = new Menu(multiplexer, this, font);
		menu.loadMainMenu();

		// erstelle und registriere Steuerung
		steuerung = new EventListener();
		steuerung.setGame(this);
		multiplexer.addProcessor(steuerung);
		Gdx.input.setInputProcessor(multiplexer);

		// initialisiere Spielvariablen
		resetGameVariables();
	}
	
    long timeOfIncident = 0, timeTillReaction = 1000000000;
    boolean condition = true, timeOfIncidentSet = false, reactionOccurred = false;
//	
//	public void freezeGame(boolean freeze) {
//		if (System.nanoTime() >= timeOfIncident + 2*timeTillReaction) {
//			menu.render();
//		}
//		freeze = false;
//	}
	
	@Override
	public void render() {

		// Hauptmenü rendern
		if (state == GameState.MAINMENU) {
			menu.render();
		}

		// Spielgrafik rendern
		if (state == GameState.UPPERWORLD)
			render_upperworld();

		if (state == GameState.LOWERWORLD)
			render_lowerworld();

		// Spiellogik updaten
		if (!(paused || game_over)) {

			if (state == GameState.UPPERWORLD&&!freeze) {
				update_variables_swim();
				// Graphik-Variablen updaten
				update_graphics();
			} 
			if (state == GameState.UPPERWORLD&&freeze) {
				if(System.nanoTime() >= timeOfIncident + 2*timeTillReaction){
					update_variables_swim();
					// Graphik-Variablen updaten
					update_graphics();
					freeze = false;
				}
			} 
			if (state == GameState.LOWERWORLD) {
				update_variables_dive();
				// Graphik-Variablen updaten
				update_graphics();
			}

		} else {
			if (game_over) {
				render_gameover();
			}
			menu.render();
		}

	}

	// setzt alle Variablen für den Spielstart
	public void resetGameVariables() {
		geschwindigkeit = 1.0f;
		beschleunigung = 0;

		swimmer_position_swim = 4;

		score = 0;
		level = 1;
		health = 5;

		paused = false;
		game_over = false;
		
		Arrays.fill(hindernis_aktiv, false);
		Arrays.fill(wand_punkte, 0);
	}

	// Methode um die Schwimmwelt zu rendern
	private void render_upperworld() {
		// Musik
		music.play();
		
		// Hintergrundfarbe
		Gdx.gl.glClearColor(0, 0.6f, 0.9f, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

		batch.begin();

		// Hintergrund
		batch.draw(wellen1, 0, wellen_x_pos % height, width, height);
		batch.draw(wellen2, 0, (wellen_x_pos % (height)) + height, width,
				height);
		batch.draw(ufer_links, 0, 0, width / 9, height);
		batch.draw(ufer_rechts, ufer_rechts.getOriginX(),
				ufer_rechts.getOriginY(), width / 9, height);

		//Animation Schwimmer
		batch.draw(swimmer_rechter_arm, (width-2*width/9) / 7 * (swimmer_position_swim-1) + swimmer_offset + width/9 + swimmer_width/5.0f + (swimmer_width/4.0f) - arm_pos_x*swimmer_width/70, (swimmer_width/6.0f - arm_pos_y*swimmer_width/80), swimmer_width/2, swimmer_width);
		batch.draw(swimmer_linker_arm, (width-2*width/9) / 7 * (swimmer_position_swim-1) + swimmer_offset + width/9 + swimmer_width/5.0f - (swimmer_width/4.0f) + arm_pos_x*swimmer_width/70, (swimmer_width/6.0f - arm_pos_y*swimmer_width/80), swimmer_width/2, swimmer_width);
		batch.draw(swimmer, (width - 2 * width / 9) / 7
				* (swimmer_position_swim - 1) + swimmer_offset + width / 9, 0,
				swimmer_width, swimmer_width);

		// Score-Anzeige
		font.setColor(Color.BLACK);
		font.draw(batch, "Score: " + score, 470, 465);

		// Hindernisse
		for (int i = 0; i < 40; i++) {
			if (hindernis_aktiv[i]) {
				Obstacle aktiv = hindernis[i];
				int aktiv_type = aktiv.getType();
				switch (aktiv_type) {
				case 0:
					batch.draw(aktiv.getSprite(),
							(width / 9) * aktiv.getBahn(),
							height - aktiv.getY(), width / 9, width / 9);
					break;
				case 1:
					batch.draw(aktiv.getSprite(),
							(width / 9) * aktiv.getBahn(),
							height - aktiv.getY(), width / 9, width / 9);
					batch.draw(aktiv.getSpritesAnim()[0], (width / 9) * aktiv.getBahn() + width/34, height - aktiv.getY() + width / 30, width / 18, width /25 + (float)(5*(Math.sin(0.3*aktiv.getY()))));
					batch.draw(aktiv.getSpritesAnim()[1], (width / 9) * aktiv.getBahn() + width/25, height - aktiv.getY() + width / 20 +(float)(2.5*(Math.sin(0.3*aktiv.getY()))), width / 30, width/60);
					batch.draw(aktiv.getSpritesAnim()[2], (width / 9) * aktiv.getBahn() + width/25, height - aktiv.getY() + width / 28 -(float)(2.5*(Math.sin(0.3*aktiv.getY()))), width / 30, width/60);
					break;
				case 2:
					batch.draw(aktiv.getSprite(),
							(width / 9) * aktiv.getBahn(),
							height - aktiv.getY(), width / 9, width / 9);
					batch.draw(aktiv.getSpritesAnim()[0],
							(width / 9) * aktiv.getBahn() + 40
									+ (aktiv.getY() % 10),
							height - aktiv.getY() + (width / 9) / 15,
							width / 18, width / 18);
					break;
				case 3:
					batch.draw(aktiv.getSprite(),
							(width / 9) * aktiv.getBahn(),
							height - aktiv.getY(), width / 9, width / 9);
					break;
				default:
					batch.draw(aktiv.getSprite(),
							(width / 9) * aktiv.getBahn(),
							height - aktiv.getY(), width / 9, width / 9);
					break;
				}
			}
		}

		// Score-Anzeige
		font.setColor(Color.BLACK);
		font.draw(batch, "Score: " + score, 470, 465);

		// Level-Anzeigen
		if (score % 30 < 2) {
			gameover.draw(batch, "Level " + level, width / 2, height / 2);
		}

		// Herzen update
		if (health == 5) {
			batch.draw(herz_voll, 19, 440, width / 18, height / 18);
			batch.draw(herz_voll, 55, 440, width / 18, height / 18);
			batch.draw(herz_voll, 90, 440, width / 18, height / 18);
			batch.draw(herz_voll, 125, 440, width / 18, height / 18);
			batch.draw(herz_voll, 160, 440, width / 18, height / 18);

		} else if (health == 4) {
			batch.draw(herz_voll, 19, 440, width / 18, height / 18);
			batch.draw(herz_voll, 55, 440, width / 18, height / 18);
			batch.draw(herz_voll, 90, 440, width / 18, height / 18);
			batch.draw(herz_voll, 125, 440, width / 18, height / 18);
			batch.draw(herz_leer, 160, 440, width / 18, height / 18);

		} else if (health == 3) {
			batch.draw(herz_voll, 19, 440, width / 18, height / 18);
			batch.draw(herz_voll, 55, 440, width / 18, height / 18);
			batch.draw(herz_voll, 90, 440, width / 18, height / 18);
			batch.draw(herz_leer, 125, 440, width / 18, height / 18);
			batch.draw(herz_leer, 160, 440, width / 18, height / 18);

		} else if (health == 2) {
			batch.draw(herz_voll, 19, 440, width / 18, height / 18);
			batch.draw(herz_voll, 55, 440, width / 18, height / 18);
			batch.draw(herz_leer, 90, 440, width / 18, height / 18);
			batch.draw(herz_leer, 125, 440, width / 18, height / 18);
			batch.draw(herz_leer, 160, 440, width / 18, height / 18);

		} else if (health == 1) {
			batch.draw(herz_voll, 19, 440, width / 18, height / 18);
			batch.draw(herz_leer, 55, 440, width / 18, height / 18);
			batch.draw(herz_leer, 90, 440, width / 18, height / 18);
			batch.draw(herz_leer, 125, 440, width / 18, height / 18);
			batch.draw(herz_leer, 160, 440, width / 18, height / 18);
		}

		else if (health == 0) {
			batch.draw(herz_leer, 19, 440, width / 18, height / 18);
			batch.draw(herz_leer, 55, 440, width / 18, height / 18);
			batch.draw(herz_leer, 90, 440, width / 18, height / 18);
			batch.draw(herz_leer, 125, 440, width / 18, height / 18);
			batch.draw(herz_leer, 160, 440, width / 18, height / 18);
		}

		else {
			batch.draw(herz_leer, 19, 440, width / 18, height / 18);
			batch.draw(herz_leer, 55, 440, width / 18, height / 18);
			batch.draw(herz_leer, 90, 440, width / 18, height / 18);
			batch.draw(herz_leer, 125, 440, width / 18, height / 18);
			batch.draw(herz_leer, 160, 440, width / 18, height / 18);
			geschwindigkeit = 0;
		}

		batch.end();
	}

	// Methode um die Tauchwelt zu rendern
	private void render_lowerworld() {
		// Hintergrundfarbe
		Gdx.gl.glClearColor(0.6f, 0.6f, 0.9f, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

		world.step(Gdx.graphics.getDeltaTime(), 6, 2);
		tauchersprite.setPosition(body.getPosition().x, body.getPosition().y);
		
		if(body.getPosition().y > 200){
			changeDiveState();
		}
		if(body.getPosition().y < 0){
			body.setLinearVelocity(0, 0);
			body.setTransform(0, 0, 0);
		}
        
		/*ShapeRenderer wand = new ShapeRenderer();
		wand.setColor(Color.GRAY);
		wand.begin(ShapeType.Line);
		// TODO for ...
		wand.end();*/
		
        batch.begin(); 	
        
        
        //Hintergrundanimation
  		batch.draw(hintergrund1, 0, -10 - unter_wasser_textur_pos, width, height - height/8);
  		batch.draw(hintergrund2, 0, -10 - 3*unter_wasser_textur_pos, width, height - height/8);
  		batch.draw(hintergrund3, 0, -10 - 7*unter_wasser_textur_pos, width, height - height/8);
  		batch.draw(hintergrund4, 0, -10 - 10*unter_wasser_textur_pos, width, height - height/8);
  		
        // Taucher
  		//Animation
        batch.draw(taucher_linkes_bein, tauchersprite.getX()-taucher_width/3 +width/10, tauchersprite.getY() + taucher_width/2 + 3.5f*(float) Math.sin(8*unter_wasser_textur_pos), taucher_width/2, taucher_width/4);
        batch.draw(taucher_rechtes_bein, tauchersprite.getX()-taucher_width/3 +width/10, tauchersprite.getY() + taucher_width/2.5f - 3.5f*(float) Math.sin(8*unter_wasser_textur_pos), taucher_width/2, taucher_width/4);

        batch.draw(tauchersprite, tauchersprite.getX()+width/10, tauchersprite.getY(), taucher_width, taucher_width);
        
        //Luftblasen
        if(luftblasen_x_pos<(0-luftblasen.getWidth()) || luftblasen_y_pos>height) init_luftblasen();
        batch.draw(luftblasen, luftblasen_x_pos, luftblasen_y_pos, taucher_width/2, taucher_width);
        
        //Hindernisse
        //TODO: Typ von Unterwasserhindernis haengt von Typ des tauchbaren Hindernisses ab!
        for(int i = 0; i<11; i++){
        	//TODO: hindernis initialisieren bei change dive state (= beim abtauchen)
        	//Hindernisse oben und unten? -> 20 Werte in Hindernis-Generator erzeugen?
        	batch.draw(hindernis_lowerworld.getSprite(), hindernis_lowerworld.getX() + i*(width/9), hindernis_lowerworld.getY() - 100*wand_punkte[i],width/9, height);
        }
		
        batch.end();

	}

	public void render_gameover() {
		String gameoverstring = "GAME OVER";
		batch.begin();
		GlyphLayout gl = new GlyphLayout(gameover, gameoverstring);
		float left = (Gdx.graphics.getWidth() - gl.width) / 2;
		float top = Gdx.graphics.getHeight() - (gl.height + 10);
		gameover.draw(batch, gameoverstring, left, top);
		gameover.setColor(Color.WHITE);
		batch.end();
	}

	// Helpermethods

	private void hindernis_Generator() {
		h = 0;
		// erste einfache Version des Hindernisgenerators
		// erstellt ein zufälliges Hindernis von Typ 1-3 auf einer zufälligen
		// Bahn mit 50%iger Wahrscheinlichkeit
		if (Math.random() < 0.5) {
			int random_bahn = (int) (Math.random() * 7 + 1);
			int random_hindernis = (int) (Math.random() * 3);
			int i = 0;
			while (hindernis_aktiv[i]) {
				i++;
			}
			hindernis[i] = init_obstacle(random_hindernis, random_bahn);
			hindernis_aktiv[i] = true;
		}
	}

	public GameState getState() {
		return state;
	}

	private void hindernis_Generator_dive() {

		//TODO: An tatsaechliche Groesse Taucher anpassen! (statt 100)
		for (int i = 0; i < 18; i++) {

			//if(wand_punkte[])
			wand_punkte[i] = wand_punkte[i + 2];

		}

		float w0 = 100 * (float) Math.random() + 100;
		float w1 = 100 * (float) Math.random();

		while (w0 - w1 < 100) {

			w0 = 100 * (float) Math.random() + 100;
			w1 = 100 * (float) Math.random();

		}

		wand_punkte[18] = w0;
		wand_punkte[19] = w1;

	}

	public void startGame() {
		resetGameVariables();
		state = GameState.UPPERWORLD;
	}

	public void pauseGame(boolean p) {
		if (p && p != paused) {
			menu.loadPauseMenu();
		}
		paused = p;
	}

	public void setGameOver() {
		game_over = true;
		menu.loadGameOverMenu();
	}

	public boolean isPaused() {
		return paused;
	}
	
	public boolean isGameOver() {
		return game_over;
	}

	public void returnToMainMenu() {
		paused = false;
		menu.loadMainMenu();
		state = GameState.MAINMENU;
		Arrays.fill(hindernis_aktiv, false);
		Arrays.fill(wand_punkte, 0);
	}

	public void endApplication() {
		Gdx.app.exit();
	}

	public void changeDiveState() {

		if (state == GameState.UPPERWORLD) {
			Arrays.fill(wand_punkte, 0);
			state = GameState.LOWERWORLD;
			body.setLinearVelocity(0, 0);
			body.setTransform(0, 100, 0);

			//Unterwasser-Hindernis initialisieren
			//TODO: -> Dynamisch annpassen -> Obstacle ueber init_Obstacle_lowerworld-Methode erzeugen
			hindernis_lowerworld  = new Obstacle(new Sprite(felsen_unter_wasser), 0, width/2, 0-width/2);
			//Hindernis-Generator anwerfen
			hindernis_Generator_dive();
			
			// TODO Dispose einfügen
		} else {
			Arrays.fill(hindernis_aktiv, false);
			state = GameState.UPPERWORLD;
		}

	}

	protected void changeSwimmerPosition_swim(int change) {
		swimmer_position_swim += change;
		if (swimmer_position_swim < 1) {
			swimmer_position_swim = 1;
		}
		if (swimmer_position_swim > 7) {
			swimmer_position_swim = 7;
		}
	}

	protected void changeSwimmerPosition_dive(int change) {

		body.applyForceToCenter(0, change, true);

	}
	
	public boolean meetObstacle(Obstacle obs, Sprite swimmer){
		if(swimmer_position_swim == obs.getBahn()){
		if(width*8/9-obs.getY()<2.5*swimmer_width){
				return true;
			}
		}
		return false;
	}
	

	private void update_graphics() {				
			
		if (state == GameState.UPPERWORLD) {
			wellen_x_pos = (wellen_x_pos - geschwindigkeit) % height;
			arm_pos += 10 % 314;
			arm_pos_x = swimmer_width/8*(float) Math.sin(0.01*arm_pos -1.5);
			arm_pos_y = swimmer_width/8*(float) Math.sin(0.01*arm_pos);
			
			// Update Hindernisse
			for (int i = 0; i < 40; i++) {
				if (hindernis_aktiv[i]) {
					Obstacle aktiv = hindernis[i];
					int aktiv_type = aktiv.getType();
					switch (aktiv_type) {
					case 0:
					case 1:
					case 2:
						aktiv.setY(aktiv.getY() + geschwindigkeit);
						break;
					case 3:
						// Richtungswechsel?

						// Bahn wechseln -> nach rechts oder nach links?
						if (aktiv.getY() % 10 == 0 && aktiv.getRichtung() == 1) {
							// Richtungswechsel
							if (aktiv.getBahn() == 7) {
								aktiv.setRichtung(2);
								Sprite temp = aktiv.getSprite();
								temp.flip(true, false);
								aktiv.setSprite(temp);
							} else
								aktiv.setBahn(aktiv.getBahn() + 1);
						} else if (aktiv.getY() % 10 == 0
								&& aktiv.getRichtung() == 2) {
							// Richtungswechsel
							if (aktiv.getBahn() == 1) {
								aktiv.setRichtung(1);
								Sprite temp = aktiv.getSprite();
								temp.flip(true, false);
								aktiv.setSprite(temp);
							} else
								aktiv.setBahn(aktiv.getBahn() - 1);
						}
						aktiv.setY(aktiv.getY() + geschwindigkeit);
						break;
					default:
						aktiv.setY(aktiv.getY() + geschwindigkeit);
						break;
					}
					//Hindernisse auf false setzen (= loeschen), wenn aus Fenster
					if(aktiv.getY() > aktiv.getSprite().getHeight() + height) hindernis_aktiv[i] = false;
				}
			}

		} else if (state == GameState.LOWERWORLD) {
			// Bewegung Hintergrundtextur
			unter_wasser_textur_pos = ((float) Math.sin((double) 0.05f
					* zeit_unter_wasser));
			zeit_unter_wasser = (zeit_unter_wasser + 1) % 200;
			taucher_width = width/7;

			//Luftblasen
			luftblasen_x_pos -= hindernis_geschwindigkeit;
			luftblasen_y_pos += (hindernis_geschwindigkeit/2 + Math.sin(0.2*luftblasen_x_pos));
			
			// Bewegung Hindernisse
			hindernis_x_pos -= hindernis_geschwindigkeit;
		}

	}

	private void readGraphics() {
		width = Gdx.graphics.getWidth();
		height = Gdx.graphics.getHeight();
		ppiX = Gdx.graphics.getPpiX();
		ppiY = Gdx.graphics.getPpiY();
	}

	private void update_variables_swim() {

		geschwindigkeit += beschleunigung;
		level = (score/10);
		swimmer_offset = ((width-2) / 9) * 1/8;
		swimmer_width = ((width-2) / 9) * 3/4;

		if (h >= width / 9) {
			hindernis_Generator();
			score++;
		}
		h += geschwindigkeit;

		// Kollisionsabfrage
		for (int i = 0; i < 40; i++) {
			if (hindernis_aktiv[i]) {
				if (meetObstacle(hindernis[i], swimmer)) {
					health--;
				    hindernis_aktiv[i]=false;
				    freeze = true;
				}
			}
		}		
		
		// GameOver check
		if (health <= 0) {
			setGameOver();
		}
	}

	private void update_variables_dive() {

		tauchersprite.setPosition(body.getPosition().x, body.getPosition().y);

		if (body.getPosition().y > 200) {
			changeDiveState();
		}
		if (body.getPosition().y < 0) {
			body.setLinearVelocity(0, 0);
			body.setTransform(0, 0, 0);
		}
	}

	// init Klasse, um Obstacle-Objekte zu erzeugen
	private Obstacle init_obstacle(int type, int bahn) {
		Obstacle new_obstacle;
		
		switch(type){
			case 0: 
				Sprite felsen_sprite = new Sprite(hindernis_felsen);
				felsen_sprite.setSize(width/9, height/9);
				new_obstacle = new Obstacle(felsen_sprite, 0, bahn, 0.0f);
				break;
			case 1:
				Sprite seerosen_sprite = new Sprite(seerosen);
				seerosen_sprite.setSize(width/9, height/9);
				Sprite seerosen_mund_sprite = new Sprite(seerosen_mund);
				seerosen_mund_sprite.setOriginCenter();
				Sprite zaehne_oben = new Sprite(seerose_zaehne);
				Sprite zaehne_unten = new Sprite(seerose_zaehne);
				zaehne_unten.flip(false, true);
				Sprite[] sprites_anim = new Sprite[3];
				sprites_anim[0] = seerosen_mund_sprite;
				sprites_anim[1] = zaehne_oben;
				sprites_anim[2] = zaehne_unten;
				new_obstacle = new Obstacle(seerosen_sprite, 1, bahn, 0.0f, 3, sprites_anim);
				break;
			case 2:
				Sprite hai_sprite = new Sprite(hai_1);
				hai_sprite.setSize(width/9, height/9);
				Sprite haikinn = new Sprite(hai_2); 
				Sprite[] sprites_anim_2 = new Sprite[1];
				sprites_anim_2[0] = haikinn;
				new_obstacle = new Obstacle(hai_sprite, 2, bahn, 0.0f, 1, sprites_anim_2);
				break;
			case 3:
				Sprite schwan_sprite = new Sprite(rennschwan);
				schwan_sprite.setSize(width/9, height/9);
				new_obstacle = new Obstacle(schwan_sprite, 3, bahn, 0.0f);
				//Richtung auf links setzen
				new_obstacle.setRichtung(2);
				break;
			default: 
				Sprite default_sprite = new Sprite(hindernis_felsen);
				default_sprite.setSize(width/9, height/9);
				new_obstacle = new Obstacle(default_sprite, 0, bahn, 0.0f);
				break;
		}
		return new_obstacle;

	}
	
	private void init_luftblasen(){
		luftblasen_x_pos = tauchersprite.getX()+taucher_width+taucher_width/8;
		luftblasen_y_pos = tauchersprite.getY()+taucher_width;
	}

	@Override
	public void dispose() {
		super.dispose();
		music.dispose();
//		generator.dispose();
	}

}